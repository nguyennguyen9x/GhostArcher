
CCEffect %{
techniques: 
  - name: opaque
    passes: 
      - vert: unlit-vs:vert
        frag: unlit-fs:frag
        properties: 
          mainTexture: 
            value: grey
          tilingOffset: 
            value: 
              - 1
              - 1
              - 0
              - 0
          mainColor: 
            value: 
              - 1
              - 1
              - 1
              - 1
            editor: 
              type: color
          colorScale: 
            value: 
              - 1
              - 1
              - 1
            target: colorScaleAndCutoff.xyz
          alphaThreshold: 
            value: 0.5
            target: colorScaleAndCutoff.w
            editor: 
              parent: USE_ALPHA_TEST
          color: 
            target: mainColor
            editor: 
              visible: false
          uAngleOffset: 
            value: 2.7
          uCellDensity: 
            value: 3.7
          uEdge: 
            value: 0.4
        migrations: 
          properties: 
            mainColor: 
              formerlySerializedAs: color
  - name: transparent
    passes: 
      - vert: unlit-vs:vert
        frag: unlit-fs:frag
        depthStencilState: 
          depthTest: true
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendDstAlpha: one_minus_src_alpha
        properties: 
          mainTexture: 
            value: grey
          tilingOffset: 
            value: 
              - 1
              - 1
              - 0
              - 0
          mainColor: 
            value: 
              - 1
              - 1
              - 1
              - 1
            editor: 
              type: color
          colorScale: 
            value: 
              - 1
              - 1
              - 1
            target: colorScaleAndCutoff.xyz
          alphaThreshold: 
            value: 0.5
            target: colorScaleAndCutoff.w
            editor: 
              parent: USE_ALPHA_TEST
          color: 
            target: mainColor
            editor: 
              visible: false
        migrations: 
          properties: 
            mainColor: 
              formerlySerializedAs: color
  - name: add
    passes: 
      - vert: unlit-vs:vert
        frag: unlit-fs:frag
        rasterizerState: 
          cullMode: none
        depthStencilState: 
          depthTest: true
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one
              blendSrcAlpha: src_alpha
              blendDstAlpha: one
        properties: 
          mainTexture: 
            value: grey
          tilingOffset: 
            value: 
              - 1
              - 1
              - 0
              - 0
          mainColor: 
            value: 
              - 1
              - 1
              - 1
              - 1
            editor: 
              type: color
          colorScale: 
            value: 
              - 1
              - 1
              - 1
            target: colorScaleAndCutoff.xyz
          alphaThreshold: 
            value: 0.5
            target: colorScaleAndCutoff.w
            editor: 
              parent: USE_ALPHA_TEST
          color: 
            target: mainColor
            editor: 
              visible: false
        migrations: 
          properties: 
            mainColor: 
              formerlySerializedAs: color
  - name: alpha-blend
    passes: 
      - vert: unlit-vs:vert
        frag: unlit-fs:frag
        rasterizerState: 
          cullMode: none
        depthStencilState: 
          depthTest: true
          depthWrite: false
        blendState: 
          targets: 
            - blend: true
              blendSrc: src_alpha
              blendDst: one_minus_src_alpha
              blendSrcAlpha: src_alpha
              blendDstAlpha: one_minus_src_alpha
        properties: 
          mainTexture: 
            value: grey
          tilingOffset: 
            value: 
              - 1
              - 1
              - 0
              - 0
          mainColor: 
            value: 
              - 1
              - 1
              - 1
              - 1
            editor: 
              type: color
          colorScale: 
            value: 
              - 1
              - 1
              - 1
            target: colorScaleAndCutoff.xyz
          alphaThreshold: 
            value: 0.5
            target: colorScaleAndCutoff.w
            editor: 
              parent: USE_ALPHA_TEST
          color: 
            target: mainColor
            editor: 
              visible: false
        migrations: 
          properties: 
            mainColor: 
              formerlySerializedAs: color
}%
        
 CCProgram unlit-vs %{
   precision highp float;
   #include <legacy/input>
   #include <builtin/uniforms/cc-global>
   #include <legacy/decode-base>
   #include <legacy/local-batch>
   #include <legacy/input>
   #include <legacy/fog-vs>
 
   #if USE_VERTEX_COLOR
     in lowp vec4 a_color;
     out lowp vec4 v_color;
   #endif
 
   #if USE_TEXTURE
     out vec2 v_uv;
     uniform TexCoords {
       vec4 tilingOffset;
     };
   #endif
 
   vec4 vert () {
     vec4 position;
     CCVertInput(position);
 
     mat4 matWorld;
     CCGetWorldMatrix(matWorld);
 
     #if USE_TEXTURE
       v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;
       #if SAMPLE_FROM_RT
         CC_HANDLE_RT_SAMPLE_FLIP(v_uv);
       #endif
     #endif
 
     #if USE_VERTEX_COLOR
       v_color = a_color;
     #endif
 
     CC_TRANSFER_FOG(matWorld * position);
     return cc_matProj * (cc_matView * matWorld) * position;
   }
 }%

 CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  #if USE_ALPHA_TEST
    #pragma define-meta ALPHA_TEST_CHANNEL options([a, r, g, b])
  #endif

  #if USE_TEXTURE
    in vec2 v_uv;
    uniform sampler2D mainTexture;
  #endif

  #if USE_VERTEX_COLOR
    in lowp vec4 v_color;
  #endif

  uniform Constant {
    vec4 mainColor;
    vec4 colorScaleAndCutoff;
		float uAngleOffset;
		float uCellDensity;
		float uEdge;
	};

vec2 c_UV0_main_4() {
	    return v_uv;
	}
	vec2 noiseVoronoiRandom (vec2 uv, float offset) 
	{
	    mat2 m = mat2(15.27, 47.63, 99.41, 89.98);
	    vec2 c = uv * m;
	    uv.x = fract(sin(c.x) * 46839.32);
	    uv.y = fract(sin(c.y) * 46839.32);
	    return vec2(sin(uv.y * offset) * 0.5 + 0.5, cos(uv.x * offset) * 0.5 + 0.5);
	}
	float c_SimpleDissolve_noiseVoronoi_3(vec2 uv, float angleOffset, float cellDensity) 
	{
	   float Out = 0.0;
	   vec2 g = floor(uv * cellDensity);
	   vec2 f = fract(uv * cellDensity);
	   float t = 8.0;
	   vec3 res = vec3(8.0, 0.0, 0.0);
	   for(int y = -1; y <= 1; y ++)
	   {
	       for(int x =- 1; x <= 1; x ++)
	       {
	           vec2 lattice = vec2(x, y);
	           vec2 offset = noiseVoronoiRandom(lattice + g, angleOffset);
	           float d = distance(lattice + offset, f);
	           if(d < res.x)
	           {
	               res = vec3(d, offset.x, offset.y);
	               Out = res.x;
	           }
	       }
	   }
	   return Out;
	}
	vec4 c_SimpleDissolve_main_3(vec4 MainColor, vec2 UV, float AngleOffset, float CellDensity, float Edge) 
	{
	    float noiseVoronoiValue = c_SimpleDissolve_noiseVoronoi_3(UV, AngleOffset, CellDensity);
	    return vec4(MainColor.r, MainColor.g, MainColor.b, MainColor.a * step(noiseVoronoiValue, Edge));
	}
	vec4 c_Output_main_1(vec4 Color) { 
	    return Color; 
	}
	vec4 shaderfx()                                    
	{                                              
	    vec2 out_UV_UV0_4 = c_UV0_main_4();
	    vec4 out_Output_SimpleDissolve_3 = c_SimpleDissolve_main_3(texture(mainTexture, v_uv), vec2(out_UV_UV0_4), uAngleOffset, uCellDensity, uEdge);
	    return c_Output_main_1(vec4(out_Output_SimpleDissolve_3));
	}                                              
	
  vec4 frag () {
     vec4 o = shaderfx();
     o.rgb *= colorScaleAndCutoff.xyz;
 
     #if USE_VERTEX_COLOR
       o *= v_color;
     #endif
 
    #if USE_ALPHA_TEST
       if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;
     #endif
 
     CC_APPLY_FOG(o);
     return CCFragOutput(o);
   }
 }%
